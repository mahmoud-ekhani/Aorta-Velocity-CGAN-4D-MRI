% add the required folders to MATLAB's search path
folder = 'C:\Users\mem1342\OneDrive - Northwestern University\matlab_nu';
addpath(genpath(folder));

% add the folder containing this script to MATLAB's search path
filePath = 'C:\Users\mem1342\OneDrive - Northwestern University\gan ct to mri transformation\MATLAB Codes';
addpath(genpath(filePath));

% find the subfolders in Aorta_CT_4Dflow directory (W: in my computer)
root = 'W:\';
sf = dir(root); % find all subfolders
sf = sf(cellfun(@isfolder,fullfile(root,{sf.name})));
sf = sf(~ismember({sf.name}, [".", "..", "excluded"]));
[~,ind] = natsort({sf.name}); % sort the subfolders
sf = sf(ind);
C = fullfile(root, {sf.name})'; % return the full path to each folder

%% for all subjects, register the CT segmentation and MRI segmentation data
ct2mri = struct();
ct2mri_counter = 1;
for ii = 1:numel(C) % loop over the subjects

  fdir = dir(fullfile(C{ii},'**/mag_struct.mat')); % return mag_struct
  if isempty(fdir)
    fprintf('File not found: %s \n', fullfile(C{ii},'**/mag_struct.mat'));
    fprintf('----------------------------------------- \n');
    continue
  else
    fdir = fdir(1);
    fprintf('File found: %s \n', fullfile(fdir.folder,fdir.name));
  end

  % load the mrStruct. The mrStruct contains the unit vector needed for the
  % co-registration of MRI and CT.
  mag = load(fullfile(fdir(1).folder,fdir(1).name)).mrStruct;
  if numel(mag.edges)<1
    fprintf('Error: Unit vectors are not complete: %s \n',...
      fullfile(fdir.folder, fdir.name));
    fprintf('----------------------------------------- \n');
    continue
  end

  % return the mri unite vectors
  U_voxel = mag.edges(1:3,1:3);

  % find the "PC_All_grayvalues.txt" text file generated by mimics
  fdir = dir(fullfile(C{ii},'**/PC_All_grayvalues.txt'));
  if isempty(fdir)
    fprintf('File not found: %s \n', fullfile(C{ii},...
      '**/PC_All_grayvalues.txt'));
    fprintf('----------------------------------------- \n');
    continue
  else
    fdir = fdir(1);
    fprintf('File found: %s \n', fullfile(fdir.folder,fdir.name));
  end

  % open the "PC_All_grayvalues.txt" text file
  fileID = fopen(fullfile(fdir.folder, fdir.name),'r');
  % read the text data in the opened text file
  data = textscan(fileID,'%f,%f,%f,%f','CollectOutput',true);
  % close the text file
  fclose(fileID);
  % save the read data as the coordinates of 3D voxels
  xM = data{:}(:,1);
  yM = data{:}(:,2);
  zM = data{:}(:,3);
  % find the origin of the MRI measurements
  O_mri = [min(xM);min(yM);min(zM)];
  % for all points, zero center with respect to the derived MRI origin
  for pos = 1:length(xM)
    temp = U_voxel\([xM(pos);yM(pos);zM(pos)]-O_mri);
    xM(pos) = temp(1);
    yM(pos) = temp(2);
    zM(pos) = temp(3);
  end
  xmin_all = min(xM);
  ymin_all = min(yM);
  zmin_all = min(zM);

  % find the pc-mri aorta segmentation text data. 
  fdir_pc = dir(fullfile(fdir.folder,'PC_Aorta_grayvalues.txt'));
  if isempty(fdir_pc)
    fprintf('File not found: %s \n', fullfile(fdir.folder,...
      'PC_Aorta_grayvalues.txt'));
    fprintf('----------------------------------------- \n');
    continue
  else
    fdir_pc = fdir_pc(1);
    fprintf('File found: %s \n', fullfile(fdir_pc.folder,fdir_pc.name));
  end
  fpath = fullfile(fdir_pc.folder, fdir_pc.name);
  fileID = fopen(fpath, 'r');
  data = textscan(fileID,'%f,%f,%f,%f','CollectOutput',true);
  xM = data{:}(:,1);
  yM = data{:}(:,2);
  zM = data{:}(:,3);
  for pos = 1:length(xM)
    temp = U_voxel\([xM(pos);yM(pos);zM(pos)]-O_mri);
    xM(pos) = temp(1);
    yM(pos) = temp(2);
    zM(pos) = temp(3);
  end
  % convert the subscripts to linear indices
  idx = sub2ind(size(mag.dataAy,1:3),round(xM-xmin_all)+1,...
    round(yM-ymin_all)+1,round(zM-zmin_all)+1);
  % create a binary mask with the same size as mag.dataAy
  magnitude_size = size(mag.dataAy);
  mask = false(magnitude_size(1:3));
  % set the values at the linear indices to 1
  mask(idx) = true;
  pc_mask = mask;

  % find the ct aorta segmentation text data. This CT data is registered
  % to mri in the mimics
  fdir_ct = dir(fullfile(fdir.folder,'CT_Aorta_grayvalues.txt'));
  if isempty(fdir_ct)
    fprintf('File not found: %s \n', fullfile(fdir.folder,...
      'CT_Aorta_grayvalues.txt'));
    fprintf('----------------------------------------- \n');
    continue
  else
    fdir_ct = fdir_ct(1);
    fprintf('File found: %s \n', fullfile(fdir_ct.folder,fdir_ct.name));
  end
  fpath = fullfile(fdir_ct.folder, fdir_ct.name);
  fileID = fopen(fpath, 'r');
  data = textscan(fileID,'%f,%f,%f,%f','CollectOutput',true);
  xM = data{:}(:,1);
  yM = data{:}(:,2);
  zM = data{:}(:,3);
  for pos = 1:length(xM)
    temp = U_voxel\([xM(pos);yM(pos);zM(pos)]-O_mri);
    xM(pos) = temp(1);
    yM(pos) = temp(2);
    zM(pos) = temp(3);
  end
  % convert the subscripts to linear indices
  idx = sub2ind(size(mag.dataAy,1:3),round(xM-xmin_all)+1,...
    round(yM-ymin_all)+1,round(zM-zmin_all)+1);
  % create a binary mask with the same size as mag.dataAy
  magnitude_size = size(mag.dataAy);
  mask = false(magnitude_size(1:3));
  % set the values at the linear indices to 1
  mask(idx) = true;
  ct_mask = mask;
  % zero pad width and height to the larger dimension
  dim = size(ct_mask);
  pad_to = max(dim(1:2))-dim(1:2);
  ct = padarray(ct_mask,[pad_to(1)/2,pad_to(2)/2,0],0,'both');

  % find the velocity mrSturct
  fdir = dir(fullfile(C{ii}, '**/vel_struct.mat'));
  if isempty(fdir)
    fprintf('File not found: %s \n', fullfile(C{ii}, '**/vel_struct.mat'));
    fprintf('----------------------------------------- \n');
    continue
  else
    fdir = fdir(1); % make sure there is only one velocity mrStruct.
    fprintf('File found: %s \n', fullfile(fdir.folder,fdir.name));
  end
  % load the velocity mrstruct
  data = load(fullfile(fdir.folder,fdir.name)).mrStruct;
  vel = data.dataAy;
  % find the net magnitude of velocity in three directions
  % apply the derived pc_mask to the calculated velocities
  vel_mag = squeeze(sqrt(sum(vel.^2,4))).*pc_mask;
  % following lines are aimed to find the peak systolic velocity
  % find five percent of the number of the voxels within the segmented aorta
  vox_num_5 = round(0.10*sum(pc_mask(:)==1));
  % find the top five percent velocities at each frame
  max_vel_per_frame = squeeze(maxk(reshape(vel_mag,[],size(vel_mag,4)),...
    vox_num_5,1));
  % find the median of the top 5%
  median_max_vel_per_frame = median(max_vel_per_frame,1);
  % find which frame has the largest value (i.e., which frame is associated
  % with systolic velocity)
  [~, idx_max_median] = max(median_max_vel_per_frame);
  % save the peak systolic velocity
  vmax = vel_mag(:,:,:,idx_max_median);
  % pad the velocity height and width to the size of the CT data
  mri = padarray(vmax,[pad_to(1)/2,pad_to(2)/2,0],0);

  % save ct and mri data in the ct2mri structure
  ct2mri(ct2mri_counter).input = ct;
  ct2mri(ct2mri_counter).flow = mri;
  fprintf('----------------------------------------- \n');
  ct2mri_counter=ct2mri_counter+1;
end
data = ct2mri;
% save the ct2mri dataset
fldr_dist = ['C:\Users\mem1342\OneDrive - Northwestern University\',...
  'gan ct to mri transformation\MRI2MRIdataset'];
save(fullfile(fldr_dist,'ct2mri_data.mat'),'data','-v7.3');

%% visualize the CT to MRI dataset
folder = ['C:\Users\mem1342\OneDrive - Northwestern University\',...
  'gan ct to mri transformation\MRI2MRIdataset'];
% find the ct2mri dataset
fdir = dir(fullfile(folder,'ct2mri_data.mat'));
% load the dataset
data = load(fullfile(fdir.folder,fdir.name)).data;

hf = figure(color=[1,1,1],windowstate='maximized');
ht = tiledlayout(hf,1,2);
ha(1) = nexttile(ht);
ha(2) = nexttile(ht);
im1 = imagesc(ha(1),max(data(1).input,[],3));
title(ha(1),'CTA',interpreter='latex',fontsize=20);
set(ha(1),linewidth=2,xtick=[],ytick=[],ydir='reverse');
daspect(ha(1),[1,1,1]);
colormap(ha(1),jet);
im2 = imagesc(ha(2),max(data(1).flow,[],3),[0,3]);
title(ha(2),'PC-MRI',interpreter='latex',fontsize=20);
set(ha(2),linewidth=2,xtick=[],ytick=[],ydir='reverse');
daspect(ha(2),[1,1,1]);
colormap(ha(2),jet);
cb = colorbar(ha(2));
set(cb,LineWidth=1,FontSize=20,FontName='arial');
set(cb.Label,String='V$_{\mathrm{max}}$ [m/s]',Interpreter='latex');
title(ht,num2str(1),Interpreter='latex',fontsize=25,fontname='arial');
pause(1);
for ii = 2:numel(data)
  im1.CData = max(data(ii).input,[],3);
  im2.CData = max(data(ii).flow,[],3);
  title(ht,num2str(ii),Interpreter='latex',fontsize=25,fontname='arial');
  pause(1);
end